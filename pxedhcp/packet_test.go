package pxedhcp

import (
	"bytes"
	"net"
	"testing"
	"fmt"
)
var dhcpPackets= [][]byte{
[]byte{
0x01, 0x01, 0x06, 0x00, 0x46, 0x34, /* .>....F4 */
0x6e, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, /* n.. .... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xa8, /* ......D. */
0x42, 0x34, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, /* B4n..... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, /* ......c. */
0x53, 0x63, 0x35, 0x01, 0x01, 0x37, 0x18, 0x01, /* Sc5..7.. */
0x02, 0x03, 0x05, 0x06, 0x0b, 0x0c, 0x0d, 0x0f, /* ........ */
0x10, 0x11, 0x12, 0x2b, 0x36, 0x3c, 0x43, 0x80, /* ...+6<C. */
0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x39, /* .......9 */
0x02, 0x04, 0xec, 0x61, 0x11, 0x00, 0x44, 0x45, /* ...a..DE */
0x4c, 0x4c, 0x36, 0x00, 0x10, 0x58, 0x80, 0x43, /* LL6..X.C */
0xb5, 0xc0, 0x4f, 0x53, 0x35, 0x32, 0x5d, 0x02, /* ..OS52]. */
0x00, 0x00, 0x5e, 0x03, 0x01, 0x02, 0x01, 0x3c, /* ..^....< */
0x20, 0x50, 0x58, 0x45, 0x43, 0x6c, 0x69, 0x65, /*  PXEClie */
0x6e, 0x74, 0x3a, 0x41, 0x72, 0x63, 0x68, 0x3a, /* nt:Arch: */
0x30, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x55, 0x4e, /* 00000:UN */
0x44, 0x49, 0x3a, 0x30, 0x30, 0x32, 0x30, 0x30, /* DI:00200 */
0x31, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 1....... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,              /* ...... */
},
[]byte{
0x02, 0x01, 0x06, 0x00, 0x46, 0x34, /* (.....F4 */
0x6e, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, /* n.. .... */
0x00, 0x00, 0xc0, 0xa8, 0x01, 0x15, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xa8, /* ......D. */
0x42, 0x34, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, /* B4n..... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x6c, /* ......al */
0x6c, 0x65, 0x6e, 0x64, 0x61, 0x6c, 0x65, 0x2e, /* lendale. */
0x6d, 0x75, 0x73, 0x65, 0x63, 0x2e, 0x65, 0x6e, /* musec.en */
0x67, 0x72, 0x2e, 0x6d, 0x75, 0x6e, 0x2e, 0x63, /* gr.mun.c */
0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* a....... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x78, /* ......px */
0x65, 0x62, 0x6f, 0x6f, 0x74, 0x00, 0x00, 0x00, /* eboot... */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, /* ......c. */
0x53, 0x63, 0x35, 0x01, 0x02, 0x36, 0x04, 0xc0, /* Sc5..6.. */
0xa8, 0x01, 0x01, 0x33, 0x04, 0x00, 0x00, 0x02, /* ...3.... */
0x58, 0x01, 0x04, 0xff, 0xff, 0xff, 0x00, 0x03, /* X....... */
0x04, 0xc0, 0xa8, 0x01, 0x01, 0x06, 0x04, 0xc0, /* ........ */
0xa8, 0x01, 0x01, 0x0f, 0x11, 0x6d, 0x75, 0x73, /* .....mus */
0x65, 0x63, 0x2e, 0x65, 0x6e, 0x67, 0x72, 0x2e, /* ec.engr. */
0x6d, 0x75, 0x6e, 0x2e, 0x63, 0x61, 0x11, 0x24, /* mun.ca.$ */
0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, /* 192.168. */
0x31, 0x2e, 0x31, 0x3a, 0x2f, 0x76, 0x61, 0x72, /* 1.1:/var */
0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, /* /cluster */
0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6d, 0x61, /* /blackma */
0x72, 0x73, 0x68, 0x31, 0xff,                    /* rsh1. */ 
},
}

var tests = []struct {
	op		byte
	xid		[]byte
	secs		[]byte
	broadcast	bool
	chaddr		net.HardwareAddr
	ciaddr		net.IP
	yiaddr		net.IP
	sname		string
	file		string

}{
	{
		op:		BOOTREQUEST,
		xid:		[]byte{0x46, 0x34, 0x6e, 0x00},
		secs:		[]byte{0x00, 0x20},
		broadcast:	true,
		chaddr:		net.HardwareAddr([]byte{0x44,0xa8,0x42,0x34,0x6e,0x00}),
		ciaddr:		net.IP([]byte{0, 0, 0, 0}),
		yiaddr:		net.IP([]byte{0, 0, 0, 0}),
		sname:		"",
		file:		"",
	},
	{
		op:		BOOTREPLY,
		xid:		[]byte{0x46, 0x34, 0x6e, 0x00},
		secs:		[]byte{0x00, 0x20},
		broadcast:	true,
		chaddr:		net.HardwareAddr([]byte{0x44,0xa8,0x42,0x34,0x6e,0x00}),
		ciaddr:		net.IP([]byte{0, 0, 0, 0}),
		yiaddr:		net.IP([]byte{192, 168, 1, 21}),
		sname:		"allendale.musec.engr.mun.ca",
		file:		"pxeboot",

	},
}


func TestNewPacket(t *testing.T) {

	for i, c := range tests {
		p := NewRequestPacket(c.xid,c.broadcast,c.ciaddr,c.chaddr)
		if c.op==BOOTREPLY{
			p.SetReply()
		}
		p.SetYIAddr(c.yiaddr)
		p.SetSecsElapsed(c.secs)
		p.SetServerName(c.sname)
		p.SetBootFile(c.file)

		if (c.op==BOOTREPLY && IsDhcpRequest(&p)) || (c.op==BOOTREQUEST && !IsDhcpRequest(&p))  {
			t.Fatalf("error :  OpCode")
		}
		if p.HType()[0]!=ETHERNET  {
			t.Fatalf("error :  HType")
		}
		if !p.isBroadcast() {
			t.Fatal("Error : Expected broadcast")
		}
		if !bytes.Equal(p[:240], dhcpPackets[i][:240]){
			t.Fatalf("Test case % d error : \nWant : [% x] \nGot  : [% x] \n", i, dhcpPackets[i][:240],p[:240])
		}

	}
}

func TestPadding(t *testing.T) {
	c:=tests[0]
	p := NewRequestPacket(c.xid,c.broadcast,c.ciaddr,c.chaddr)
	p.Padding(512)
	if len(p)!=512 {
		t.Fatalf("error : padding \n")
	}
}

func TestAddOptions(t *testing.T)  {
	c:=tests[0]
	p := NewRequestPacket(c.xid,c.broadcast,c.ciaddr,c.chaddr)
	p.SetYIAddr(c.yiaddr)
	p.SetSecsElapsed(c.secs)
	p.SetServerName(c.sname)
	p.SetBootFile(c.file)
	p.AddOption(OptDHCPMsgTye,[]byte{01})
	p.AddOption(OptParameterList,[]byte{1, 2, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 43, 54, 60, 67, 128, 129, 130, 131, 132, 133, 134, 135})
	p.AddOption(OptDHCPMaxMsgSize,[]byte{0x04, 0xec})
	p.AddOption(OptUUIDGUID,[]byte{0x00, 0x44, 0x45, 0x4c, 0x4c, 0x36, 0x00, 0x10, 0x58, 0x80, 0x43, 0xb5, 0xc0, 0x4f, 0x53, 0x35, 0x32})
	p.AddOption(OptClientSystemArchitecture,[]byte{0x00, 0x00})
	p.AddOption(OptClientNetworkDeviceInterface,[]byte{0x01, 0x02, 0x01})
	p.AddOption(OptClassId,[]byte{0x50, 0x58, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x41, 0x72, 0x63, 0x68, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x55, 0x4e, 0x44, 0x49, 0x3a, 0x30, 0x30, 0x32, 0x30, 0x30, 0x31})
	p.Padding(len(dhcpPackets[0]))
	if !bytes.Equal(p, dhcpPackets[0]){
		t.Fatalf("Error : \nWant : [% x], %d \nGot  : [% x],%d \n",dhcpPackets[0],len(dhcpPackets[0]),p,len(p))
	}


}

func TestParseOptions(t *testing.T)  {
	p:=Packet(dhcpPackets[0][:])
	opts:=p.ParseOptions()
	for o, v:=range opts {
		fmt.Printf("%x, %d, % x \n",o,len(v),v)
	}
}
